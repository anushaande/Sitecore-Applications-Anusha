@if (Sitecore.Context.PageMode.IsExperienceEditorEditing)
{
	<h4>Faculty Academic Profile</h4>
    if (!Model.dsIsSet)
    {
        string UID = "_" + Model.Rendering.UniqueId.ToString().Replace('-', '_');
        <script>
            function callSetDataSrc@(UID)() {
                setDataSrc(
                    '@Html.Raw(Model.PageItem.ID.ToString())',                                              // itemID
                    'User Defined2/Component Template/Wildcard404Handler',                                               // templatePath
                    '_FAP',                                                                                 // suffix
                    '@Html.Raw(Model.Rendering.Properties["RenderingItemPath"])',                           // renderingID
                    '@Html.Raw(Model.Item.Database.Name)',                                                  // dbName
                    '@Html.Raw(Sitecore.Context.Device.ID.ToString())',                                     // deviceID
                    '@Html.Raw(Model.Rendering.UniqueId.ToString())',                                       // referenceID
                    'btnDSSet@(UID)',                                                                                     // btnID
                    false                                                                                    // reload true
                );
            }
        </script>
        <div style="text-align:center" class="imgContainer">    
            <p>Create a datasource so that Sitecore will render this component when not editing.</p>
            <input id="btnDSSet@(UID)" class="pe-button pe-green" type="button" value="Create New Datasource" onclick="callSetDataSrc@(UID)    ()" />
            <script>if(typeof(autoSave) != "undefined"){ autoSave(); }</script>
        </div>
    }
}
else{    
<div class="faculty-profile">
    @if(!Model.validId) {
        Model.ProfileNotFound();
        <h1>Invalid Person ID.</h1>
    }
    else if (Model.person == null || String.IsNullOrEmpty(Model.personID.ToString()) || !String.IsNullOrEmpty(Model.person.error))
    {
        Model.ProfileNotFound();
        <h1>Person could not be found.</h1>
    }    
    else {
        <div class="profile-sidebar">
            <img class="profile-photo" src="http://hsccf.hsc.usf.edu/facultydirectory/clinicalDirectory/viewFile.cfc?method=viewPic&person_id=@Html.Raw(Model.personID)" alt="@Html.Raw(Model.person.firstName + " " + Model.person.lastName + " " + Model.person.researchid)" />
            @if (!String.IsNullOrEmpty(Model.person.researchid)) {
                <span id="badgeCont656831" style="width:126px">
                    <script src="http://labs.researcherid.com/mashlets?el=badgeCont656831&amp;mashlet=badge&amp;showTitle=false&amp;className=a&amp;rid=@Html.Raw(Model.person.researchid)"></script>
                </span>
            }
        </div>
        <div class="profile-main">
            @{string title= "";
                if (!String.IsNullOrEmpty(Model.person.title))
                {
                    title = ", <span class=\"faculty-credentials\">" + Model.person.title + "</span>";
                }
            }
            <h1>@Html.Raw(Model.person.firstName + " " + Model.person.lastName + title)</h1>

            <!-- Appointments -->
            @foreach (string appt in Model.person.appointments)
            {
                <h2 class="faculty-position">@Model.FormatAppt(appt)</h2>
            }

            <!-- Contact Information -->
            @if (!String.IsNullOrEmpty(Model.person.myAddresses[0].street)) 
            {
                <p>
                    <span class="text-label">Contact Info</span>
                    @Model.person.myAddresses[0].street<br />
                    @if (!String.IsNullOrEmpty(Model.person.myAddresses[0].street2))
                    {
                        <text>@(Model.person.myAddresses[0].street2)<br /></text>
                    }
                    @Html.Raw(Model.person.myAddresses[0].city)&nbsp;@Html.Raw(Model.person.myAddresses[0].state)&nbsp;@Html.Raw(Model.person.myAddresses[0].zip)
                </p>
            }

            @if (!String.IsNullOrEmpty(Model.person.email)) 
            {
                <p>
                    <span class="text-label">Academic Email:</span> 
                    <a href="mailto:@Html.Raw(Model.person.email)">@Html.Raw(Model.person.email)</a>
                </p>
            }

            @if (!String.IsNullOrEmpty(Model.person.phone) || !String.IsNullOrEmpty(Model.person.fax)) 
            {
                <p>
                    @if (!String.IsNullOrEmpty(Model.person.phone))
                    {
                        <span class="text-label">Academic Phone:</span>@Html.Raw(Model.person.phone)
                    }
            
                    @if (!String.IsNullOrEmpty(Model.person.fax))
                    {
                        <span class="text-label">Fax:</span> @Html.Raw(Model.person.fax)
                    }
                </p>
            }

            @if (!String.IsNullOrEmpty(Model.person.cvSrc))
            {
                <p>
                    <a href="@Html.Raw(Model.person.cvSrc)" target="_blank">View My C.V.</a>
                </p>
            }

            <!-- Education -->
            @if (Model.person.degrees != "") {
                <h3>Education</h3>
                <div class="faculty-degrees">@Html.Raw(Model.person.degrees)</div>
            }

            <!-- Academic Philosophy -->
            @if (!String.IsNullOrEmpty(Model.person.academic_philosophy)) {
                <h3>Academic Philosophy</h3>
                <div class="academic-philosophy">
                    <p>"@Html.Raw(Model.person.academic_philosophy)"</p>
                </div>
            }

            <!-- Interdisciplinary and Emerging Signature Programs  -->
            @if (Model.person.signatureProgram.Length > 0)  {
                <h3>Interdisciplinary and Emerging Signature Programs</h3>
                <ul>
                    @foreach (string program in Model.person.signatureProgram)
                    {
                        <li>@Html.Raw(program)</li>
                    }
                </ul>
            }

            <!-- Addresses Also need a test case that has addresses -->
            @if (Model.person.addresses.Length > 0) {
                <h3>Locations</h3>
                <ul>
                    @foreach (string address in Model.person.addresses)
                    {
                        <li>@Html.Raw(address)</li>
                    }
                </ul>
            }
                
            <!-- Clinical Interests -->
            @if (Model.person.clinicalInterests.Length > 0)
            {
                <h3>Clinical Interests</h3>
                <ul>
                    @foreach (string interest in Model.person.clinicalInterests)
                    {
                        <li>@Html.Raw(interest)</li>
                    }
                </ul>
            }

            <!-- Research Interests -->
            @if (Model.person.researchInterests.Length > 0)
            {
                <h3>Research Interests</h3>
                <ul>
                    @foreach (string interest in Model.person.researchInterests)
                    {
                        <li>@Html.Raw(interest)</li>
                    }
                </ul>
            }

            <!-- Healthcare Philosophy -->
            @if (!String.IsNullOrEmpty(Model.person.philosophy))
            {
                <h3>Philosophy</h3>
                <p>@Html.Raw(Model.person.philosophy)</p>
            }

            <!-- Memberships -->
            @if (Model.person.memberships.Length > 0) { 
                <h3>Memberships</h3>
                <ul>
                    @foreach (string membership in Model.person.memberships)
                    {
                        <li>@Html.Raw(membership)</li>
                    }
                </ul>
            }

            <!-- Publications -->
            @if (Model.person.publications.Length > 0)
            {
                <h3>Recent Publications</h3>
                <ul data-pagination="5" class="pub-list">
                @foreach (string publication in Model.person.publications)
                {
                    <li>@Html.Raw(publication)</li>
                }
                </ul>
            }

            <!-- Positions Held -->
            @if (Model.person.otherPositions.Length > 0)
            {
                <h3>Positions Held</h3>
                <ul>
                @if (Model.person.otherPositions.Length > 0)
                {
                    foreach (string oposition in Model.person.otherPositions)
                    {
                        <li>@Html.Raw(oposition)</li>
                    }
                }
                </ul>
            }           

            <!-- Awards/Honors -->
            @if (Model.person.awards.Length > 0)
            {
                <h3>Awards/Honors</h3>
                <ul data-pagination="5">
                @foreach (string award in Model.person.awards)
                {
                    <li>@Html.Raw(award)</li>
                }
                </ul>
            }

    </div>
    }
</div>
}